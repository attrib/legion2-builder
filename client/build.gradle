buildscript {
    ext.kotlinx_html_version = "0.6.8"
    ext.react_version = "16.2.0-pre.16-kotlin-1.2.0"
    ext.react_dom_version = "16.2.0-pre.16-kotlin-1.2.0"


    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.26"
    }
}
apply plugin: 'kotlin-platform-js'
apply plugin: "org.jetbrains.kotlin.frontend"
apply plugin: "kotlin2js"
apply plugin: "kotlin-dce-js"
apply plugin: 'kotlinx-serialization'

repositories {
    maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url "http://dl.bintray.com/kotlinx/kotlinx" }
    maven { url "http://dl.bintray.com/kotlin/kotlin-js-wrappers/" }
    mavenCentral()
}

dependencies {
    expectedBy project(":api")
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile("org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version")
    compile "org.jetbrains:kotlin-react:$react_version"
    compile "org.jetbrains:kotlin-react-dom:$react_dom_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileKotlin2Js {
    kotlinOptions {
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = "commonjs"
        metaInfo = true
    }
}
compileTestKotlin2Js {
    kotlinOptions {
        outputFile = "client/build/classes/kotlin/test/client_test.js"
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = "commonjs"
        metaInfo = true
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

kotlinFrontend {
    sourceMaps = true
    npm {
        dependency("react-dom", "^16.2.0")
        dependency("react", "^16.2.0")
        dependency("text-encoding", "0.6.4")
        dependency("lz-string", "1.4.4")
        dependency("d3", "4.12.2")

        devDependency("es6-shim", "*")
        devDependency("karma-babel-preprocessor", "*")
        devDependency("karma-es6-shim", "*")
        devDependency("karma", "^1.7.1")
        devDependency("style-loader", "0.19.1")
        devDependency("css-loader","0.28.7")
        devDependency("url-loader", "0.6.2")
        devDependency("source-map-loader", "0.2.3")
        devDependency("extract-text-webpack-plugin", "3.0.2")
    }

    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
        sourceMapEnabled = true
    }

    karma {
//        frameworks = ["qunit", "es6-shim"]
//        plugins = ["karma-es6-shim"]
        customConfigFile = "karma.conf.js"
    }
    define("PRODUCTION", System.getenv("PRODUCTION")=="true")
}

compileTestKotlin2Js.doLast {
    copy {
        from '.'
        into "build"
        include("webpack.karma.config.js")
    }
}
/*
compileKotlin2Js.doLast {
    configurations.compile.each{ File file->
        if( file.isDirectory() ) {
            copy {
                from file.absolutePath
                into "$projectDir/build/lib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources") || !path.startsWith("META-INF/"))
                }
            }

        } else {
            copy {
                from zipTree(file.absolutePath)
                into "$projectDir/build/lib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources") || !path.startsWith("META-INF/"))
                }
            }
        }
    }
}
compileTestKotlin2Js.doLast {
    configurations.testCompile.each{ File file->
        if( file.isDirectory() ) {
            copy {
                from file.absolutePath
                into "$projectDir/build/testlib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources") || !path.startsWith("META-INF/"))
                }
            }

        } else {
            copy {
                from zipTree(file.absolutePath)
                into "$projectDir/build/testlib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources") || !path.startsWith("META-INF/"))
                }
            }
        }
    }
}
*/
task copyArtifacts(type:Copy) {
    from("src/main/web") {
        include "**/*"
    }
    from("build/bundle") {
        include "**/*"
    }
    into("../publish")
}

assemble.dependsOn copyArtifacts